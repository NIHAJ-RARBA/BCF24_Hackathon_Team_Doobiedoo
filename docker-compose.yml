services:
  shared-db:
    image: postgres:13
    environment:
      POSTGRES_DB: train_booking_db        # Shared database for both services
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword      # Set the PostgreSQL password
    volumes:
      - ./services/train-ticket-booking-db/init.sql:/docker-entrypoint-initdb.d/init.sql  # Initialize the shared database
    ports:
      - "5432:5432"
    networks:
      - app-network                        # Expose PostgreSQL on port 5432

  train-ticket-service:
    build: ./services/train-ticket-service # Ensure the correct relative path to train-ticket-service
    environment:
      DB_HOST: shared-db
      DB_USER: postgres
      DB_PASSWORD: yourpassword
      DB_NAME: train_booking_db
      DB_PORT: 5432
    ports:
      - "5001:5001"                        # Expose Train-Ticket Service on port 5001
    depends_on:
      - shared-db
    networks:
      - app-network                          # Ensure PostgreSQL starts before Train-Ticket Service

  booking-service:
    build: ./services/booking              # Ensure the correct relative path to booking-service
    environment:
      DB_HOST: shared-db
      DB_USER: postgres
      DB_PASSWORD: yourpassword
      DB_NAME: train_booking_db
      DB_PORT: 5432
    ports:
      - "5002:5002"                        # Expose Booking Service on port 5002
    depends_on:
      - shared-db
    networks:
      - app-network                          # Ensure PostgreSQL starts before Booking Service

  notification-service:
    build: ./services/notification  # Adjust to the correct path where the Dockerfile is located
    ports:
      - "6000:6000"  # Map port 5003 on the host to port 5003 in the container
    environment:
      - NODE_ENV=production
    networks:
      - app-network  # You can add more environment variables if necessary

networks:
  app-network:
   