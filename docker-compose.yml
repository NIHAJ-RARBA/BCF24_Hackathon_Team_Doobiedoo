services:
  auth-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: auth
      MYSQL_ROOT_PASSWORD: OrewaNihal001
    volumes:
      - ./services/auth/init.sql:/docker-entrypoint-initdb.d/init.sql  # Initialize with the SQL script
    ports:
      - "3350:3306"  # Use the correct MySQL port
    networks:
      - app-network  # Connect to the common network

  shared-db:
    image: postgres:13
    environment:
      POSTGRES_DB: train_booking_db        # Shared database for both services
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword      # Set the PostgreSQL password
    volumes:
      - ./services/train-ticket-booking-db/init.sql:/docker-entrypoint-initdb.d/init.sql  # Initialize the shared database
    ports:
      - "5432:5432"
    networks:
      - app-network  # Connect to the common network

  train-ticket-service:
    build: ./services/train-ticket-service # Ensure the correct relative path to train-ticket-service
    environment:
      DB_HOST: shared-db
      DB_USER: postgres
      DB_PASSWORD: yourpassword
      DB_NAME: train_booking_db
      DB_PORT: 5432
    ports:
      - "5001:5001"                        # Expose Train-Ticket Service on port 5001
    depends_on:
      - shared-db
    networks:
      - app-network  # Ensure PostgreSQL starts before Train-Ticket Service


  notification-service:
    build: ./services/notification  # Adjust to the correct path where the Dockerfile is located
    ports:
      - "6000:6000"  # Map port 6000 on the host to port 6000 in the container
    environment:
      - NODE_ENV=production
    networks:
      - app-network  # You can add more environment variables if necessary

  auth-service:
    build: ./services/auth
    environment:
      MYSQL_HOST: auth-db  # Connects to the new MySQL instance for auth service
      MYSQL_USER: root
      MYSQL_PASSWORD: OrewaNihal001
      MYSQL_DB: auth
      JWT_SECRET: sarcasm
    ports:
      - "5050:5050"
    depends_on:
      - auth-db  # Ensure the new MySQL instance starts before Auth Service
    networks:
      - app-network  # Connect to the common network
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  booking-service:
    build: ./services/booking
    environment:
      DB_HOST: shared-db
      DB_USER: postgres
      DB_PASSWORD: yourpassword
      DB_NAME: train_booking_db
      DB_PORT: 5432
      REDIS_HOST: redis  # Correct Redis service name
      REDIS_PORT: 6379
    ports:
      - "5002:5002"
    depends_on:
      - shared-db
      - redis  # Ensure Redis starts before booking-service
    networks:
      - app-network


networks:
  app-network:  # Define the shared network
